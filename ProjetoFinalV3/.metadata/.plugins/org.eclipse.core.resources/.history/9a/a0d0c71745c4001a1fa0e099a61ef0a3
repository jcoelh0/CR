/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdlib.h>
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "fsl.h"
#include "xtmrctr_l.h"
#include "xil_printf.h"
#include <math.h>

typedef int bool;

#define min(a, b)	((a < b) ? a : b)

#define N	4000

void ResetPerformanceTimer() {
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	XTmrCtr_SetLoadReg(XPAR_TMRCTR_0_BASEADDR, 0, 0x00000001);
	XTmrCtr_LoadTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
	XTmrCtr_SetControlStatusReg(XPAR_TMRCTR_0_BASEADDR, 0, 0x00000000);
}

void RestartPerformanceTimer() {
	ResetPerformanceTimer();
	XTmrCtr_Enable(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int GetPerformanceTimer() {
	return XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int StopAndGetPerformanceTimer() {
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	return GetPerformanceTimer();
}

u32 float_to_fixed(double x){
	return x*pow(2,16);
}

double fixed_to_float(u32 x){
	return (double)x*pow(2,-16);
}

int main() {
	unsigned int timeElapsed;

	init_platform();

	int numRuns = 1;
	int sumHw, sumSw = 0;

	for (int i = 0; i < numRuns; i++) {
		if(numRuns < 4)
			xil_printf(
				"\n\rSoftware Only vs. Hardware Assisted Distancia Euclidiana Demonstration\n\r");

		/*int x0 = rand()%10000;
		int y0 = rand()%10000;
		int z0 = rand()%10000;
		int x1 = rand()%10000;
		int y1 = rand()%10000;
		int z1 = rand()%10000;*/

		double x0 = 4;
		double y0 = 2;
		double z0 = 1;
		double x1 = 9.0;
		double y1 = 200.0;
		double z1 = 37.0;

		u32 x0HW = float_to_fixed(x0);
		u32 y0HW = float_to_fixed(y0);
		u32 z0HW = float_to_fixed(z0);
		u32 x1HW = float_to_fixed(x1);
		u32 y1HW = float_to_fixed(y1);
		u32 z1HW = float_to_fixed(z1);

		// Hardware assisted
		RestartPerformanceTimer();

		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 0, x0HW);
		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 4, y0HW);
		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 8, z0HW);
		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 12, x1HW);
		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 16, y1HW);
		Xil_Out32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 20, z1HW);

		volatile u32 resultBits = Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 24);

		timeElapsed = StopAndGetPerformanceTimer();


		if(numRuns < 4)
			xil_printf(
				"\n\rHardware assisted Distancia Euclidiana time: %d microseconds",
				timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
		sumHw += timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000);

		if(numRuns < 4)
			xil_printf("\n\rEnviado para o periferico: (%d, %x, %d); (%x, %d, %x)",
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR)>>16,
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 4)>>16,
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 8)>>16,
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 12)>>16,
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 16)>>16,
				Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 20)>>16);


		int hwResult_decimal = (u16) (resultBits);//will return the least significant 16bits
		int hwResult_inteira = (u32) (resultBits >> 16);//shift and return the least significant 16bits

		int count = 0;
		float sum = 0;
		while (count != 16)
		{
		    unsigned long long bit = hwResult_decimal & 1;
		    sum += (int)bit * pow(2,-(16-count));
		    //xil_printf("\n\Debug bit: (%d)",bit);
		    //2^(-3)+2^(-4)+2^(-7)+2^(-11)+2^(-12)+2^(-14)+2^(-15)+2^(-16)
		    hwResult_decimal >>= 1;
		    count++;
		}

		int whole2 = sum;
		int final_float = (sum - whole2)*10000000000;


		/*
		xil_printf("\n\rDebug: %08x", hwResult_inteira);
		xil_printf("\n\rDebug: %08X", hwResult_decimal);
		xil_printf("\n\rDebug: %d", hwResult_decimal*pow(2,-16));
		//xil_printf("\n\rDebug: %d", sum);
		xil_printf("\n\rDebug: %08x", A );
		xil_printf("\n\rDebug: %d", A );
		xil_printf("\n\rDebug: %08X", resultBits);
		xil_printf("\n\rDebug: %d", Xil_In32(XPAR_DISTANCIAEUCLIDIANAV3_0_S00_AXI_BASEADDR + 24) );
		*/

		if(numRuns < 4)
			xil_printf("\n\rResultado Obtido HW: %d.%1d\n", hwResult_inteira, final_float);

		// Software only
		RestartPerformanceTimer();
		double b4sqrt= (((x1)-x0)*((x1)-x0))    +    (((y1)-(y0))*((y1)-(y0)))    +    (((z1)-(z0))*((z1)-(z0)));
		double swResult = sqrt(b4sqrt);

		timeElapsed = StopAndGetPerformanceTimer();

		int whole = swResult;
		int thousandths = (swResult - whole)*10000000000;


		if(numRuns < 4)
			xil_printf(
				"\n\rSoftware only Distancia Euclidiana time: %d microseconds",
				timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
		sumSw += timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000);

		if(numRuns < 4)
			xil_printf("\n\rResultado obtido SW: %d.%1d\n", whole, thousandths);

	}
	xil_printf("\n\rSoftware only time: %d microseconds",sumSw);
	xil_printf("\n\r                  vs");
	xil_printf("\n\rHardware assisted time: %d microseconds",sumHw);

	double ratio = (double)sumSw/(double)sumHw;
	int whole = ratio;
	int thousandths = (ratio - whole)*1000;
	xil_printf("\n\rRatio SW/HW: %d.%d",whole, thousandths);


	double averageSw = (double)sumSw/(double)numRuns;
	whole = averageSw;
	thousandths = (averageSw - whole)*1000;
	xil_printf("\n\rAverage time of Software: %d.%03d", whole, thousandths);

	double averageHw = (double)sumHw/(double)numRuns;
	whole = averageHw;
	thousandths = (averageHw - whole)*1000;
	xil_printf("\n\rAverage time of Hardware: %d.%03d", whole, thousandths);
	xil_printf("\n\rNumber of runs: %d", numRuns);
	xil_printf("\n\r----------------------------------------------------------------------------\n");

	cleanup_platform();
	return 0;
}
